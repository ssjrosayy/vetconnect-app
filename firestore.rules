rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is a vet
    function isVet() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'VET';
    }
    
    // Helper function to check if user is a pet owner
    function isPetOwner() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'PET_OWNER';
    }
    
    // Helper function to check if user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // User chat sessions - Updated rules for chatbot
    match /user_chats/{userId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Pet chatbot messages
    match /pet_chatbot_messages/{messageId} {
      allow create: if request.auth != null 
        && request.resource.data.keys().hasAll(['content', 'userId', 'isUserMessage', 'timestamp', 'createdAt']);
      
      allow read: if request.auth != null;
    }

    // Ensure users can only access their data
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }
    
    // Vet profiles
    match /vets/{vetId} {
      allow read: if true;
      allow write: if isAuthenticated() && request.auth.uid == vetId;
      
      // Allow vets to manage their time slots
      match /slots/{document=**} {
        allow read: if true;
        allow write, update: if request.auth != null && request.auth.uid == vetId;
      }
    }
    
    // Appointments
    match /appointments/{appointmentId} {
      allow read: if isAuthenticated() && 
        (isOwner(resource.data.petOwnerId) || resource.data.vetId == request.auth.uid);
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (isOwner(resource.data.petOwnerId) || resource.data.vetId == request.auth.uid);
      allow delete: if false;  // Prevent deletions - maintain appointment history
    }
    
    // Pet profiles
    match /pets/{petId} {
      allow read: if isAuthenticated() && isOwner(resource.data.uid);
      allow write: if isAuthenticated() && isOwner(request.resource.data.uid);
    }
    
    // Medical records
    match /medical_records/{recordId} {
      allow read: if request.auth != null && 
        (resource.data.vetId == request.auth.uid || 
         resource.data.petOwnerId == request.auth.uid);
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.vetId;
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.vetId;
      allow delete: if false;
    }
    
    // Chats
    match /chats/{chatId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated() && (
        resource.data.vetId == request.auth.uid || 
        resource.data.petOwnerId == request.auth.uid
      );
      
      match /messages/{messageId} {
        allow read: if isAuthenticated() && (
          get(/databases/$(database)/documents/chats/$(chatId)).data.vetId == request.auth.uid ||
          get(/databases/$(database)/documents/chats/$(chatId)).data.petOwnerId == request.auth.uid
        );
        allow create: if isAuthenticated() && (
          get(/databases/$(database)/documents/chats/$(chatId)).data.vetId == request.auth.uid ||
          get(/databases/$(database)/documents/chats/$(chatId)).data.petOwnerId == request.auth.uid
        );
      }
    }

    // Chatbot messages
    match /chatbot_messages/{messageId} {
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.keys().hasAll(['content', 'userId', 'isUserMessage', 'timestamp', 'createdAt'])
        && request.resource.data.content is string
        && request.resource.data.userId is string
        && request.resource.data.isUserMessage is bool;
      
      allow read: if request.auth != null 
        && resource.data.userId == request.auth.uid;
    }

    // Vet availability rules
    match /vet_availability/{vetId} {
      allow read: if true;  // Public read access
      allow write: if isAuthenticated() && request.auth.uid == vetId;
    }
  }
}

